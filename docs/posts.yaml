openapi: '3.0.3'
info:
  title: ALU GLOBE Posts
  version: '1.0'
servers:
  - url: http://localhost:8000

tags:
  - name: Post
    description: Everything about posts
  - name: Comment
    description: Everything about post's comments

paths:
  /posts:
    get:
      tags:
        - Post
      summary: Get posts from ALU GLOBE
      description: Retrieve a list of posts from ALU GLOBE with optional filters and pagination.
      parameters:
        - name: token
          in: cookie
          description: |
            The user authentication token.  
            Required for accessing protected endpoints.
          required: true
          schema:
            type: string

        - name: limit
          in: query
          description: |
            The maximum number of posts to return per page.  
            Recommended to use cursor pagination if the page hits 20.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 20
            example: 10

        - name: page
          in: query
          description: The page number for page-based pagination (starts at 1).
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1

        - name: lastPostId
          in: query
          description: |
            The ID of the last post from the previous page.  
            Used for cursor-based pagination to fetch the next set of posts.
          required: false
          schema:
            type: string
            example: '3d5b1ee5-2079-4234-a1cd-cc01e1bc1cb7'

        - name: username
          in: query
          description: Filter posts by the username of the author.
          required: false
          schema:
            type: string
            example: 'Eldrige'

        - name: likes
          in: query
          description: Filter posts by the minimum number of likes.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 5

        - name: comments
          in: query
          description: Filter posts by the minimum number of comments.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 2

        - name: privacy
          in: query
          description: |
            The privacy level of the post.  
            - PUBLIC: Visible to everyone  
            - FRIENDS_ONLY: Visible to friends only  
            - PRIVATE: Visible only to the author
          required: false
          schema:
            type: string
            enum:
              - PUBLIC
              - FRIENDS_ONLY
              - PRIVATE
            default: PUBLIC

      responses:
        '200':
          description: A list of posts matching the query parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      tags:
        - Post
      summary: Create a new post
      description: Create a new post with optional file uploads (images, videos).
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: The text content of the post.
                  example: This is a post
                files:
                  type: array
                  description: The files to upload (images, video). Maximum 10 files.
                  maxItems: 10
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Post created successfully.

  /posts/{postId}:
    get:
      tags:
        - Post
      summary: Get a single post by ID
      description: Retrieve a single post by its unique identifier.
      parameters:
        - name: postId
          in: path
          required: true
          description: The unique identifier of the post.
          schema:
            type: string
      responses:
        '200':
          description: The post with the specified postId.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not found

    patch:
      tags:
        - Post
      summary: Update a post (like/share)
      description: Like or share a post by its ID.
      parameters:
        - name: postId
          in: path
          required: true
          description: The unique identifier of the post.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  description: |
                    Like or dislike a post.
                    - 1: like a post
                    - -1: dislike a post
                  type: integer
                  enum: [1, -1]
                  example: 1
                share:
                  description: |
                    Share or unshare a post.
                    - 1: share a post
                    - -1: unshare a post
                  type: integer
                  enum: [1, -1]
                  example: -1
      responses:
        '200':
          description: Post updated successfully.
          content:
            application/json:
              schema:
                type: string
                example: 'Post updated successfully'

    delete:
      tags:
        - Post
      summary: Soft delete a post
      description: Soft delete a post by its ID.
      parameters:
        - name: postId
          in: path
          required: true
          description: The unique identifier of the post.
          schema:
            type: string
      responses:
        '204':
          description: The post has been soft deleted successfully.
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Not found

  /posts/{postId}/comments:
    post:
      tags:
        - Comment
      summary: Create a comment
      responses:
        '201':
          description: Created

components:
  schemas:
    Post:
      type: object
      properties:
        content:
          properties:
            id:
              type: string
              example: 52468188-32db-4f00-9633-a629180d4b04
            userId:
              type: string
              example: '278d7d5c-be05-4fd2-a67e-0c8485305046'
            postId:
              type: string
              example: '3d5b1ee5-2079-4234-a1cd-cc01e1bc1cb7'
            content:
              type: string
              example: 'Quite nice again'
            isEdited:
              type: boolean
              example: true
            createdAt:
              type: string
              example: '2025-05-05T18:03:14.290Z'
            updatedAt:
              type: string
              example: '2025-05-08T07:36:14.128Z'
            commentParentId:
              type: string
              example: null
            likesCount:
              type: number
              example: null
            userImageUrl:
              type: string
              example: 'https://igwxfnktwpckgfbtbffo.supabase.co/storage/v1/object/public/globe-bucket/profile-pictures/canyon.png'
            username:
              type: string
              example: 'Eldrige'
